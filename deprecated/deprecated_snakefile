import os
import subprocess

srcdir = '/oak/stanford/groups/smontgom/nicolerg/src/format_refseq'
base = '/oak/stanford/groups/smontgom/nicolerg/REFSEQ'
os.chdir(base)

#SAMPLES = subprocess.check_output('ls gbff/*.gz | sed "s/\.genomic.*//" | sed "s/^gbff\///"', shell=True).decode().strip().split()
CHUNKS = subprocess.check_output('ls gbff/bacteria* | sed "s/.*bacteria\.//" | sed "s/\.genomic.*//"', shell=True).decode().strip().split()

rule all:
    input:
        expand('chunk_bacteria.{chunk}.done.txt', chunk = CHUNKS)

# rule format_headers:
#     input:
#         file = 'gbff/{sample}.genomic.gbff.gz',
#         script = srcdir + '/format_headers.py'
#     output:
#         'headers/all/{sample}.genomic.headers_map.tsv'
#     log:
#         'log/{sample}.format_headers.log'
#     shell:
#         'python {input.script} {input.file} {output} > {log} 2>&1'


# rule reduce_headers:
#     input:
#         file = 'headers/all/{sample}.genomic.headers_map.tsv',
#         script = srcdir + '/reduce_headers.py'
#     output:
#         'headers/reduced/{sample}.genomic.headers_map.reduced.tsv'
#     shell:
#         'python {input.script} {input.file} {output}'


# rule format_fna:
#     input:
#         header_map = 'headers/reduced/{sample}.genomic.headers_map.reduced.tsv',
#         fna = 'fna/{sample}.1.genomic.fna.gz',
#         script = srcdir + '/format_fna.py'
#     output:
#         new_fna = temp('concat_fna/{sample}.1.genomic.concat.fna.gz'),
#         all_lengths = 'all_lengths/{sample}.all_lengths.tsv'
#     log:
#         'log/{sample}.format_fna.log'
#     shell:
#         'python {input.script} {input.fna} {input.header_map} {output.new_fna} {output.all_lengths} > {log} 2>&1'


# rule merge_fna:
#     input: 
#         expand('concat_fna/{sample}.1.genomic.concat.fna.gz', sample = SAMPLES)
#     output:
#         'concat_fna/microbe_temp.fna.gz'
#     shell:
#         "cat {input} >> {output}"


# rule concat_all_lengths:
#     input:
#         all_lengths = expand('all_lengths/{sample}.all_lengths.tsv',sample = SAMPLES)
#     output:
#         'all_lengths.txt'
#     shell:
#         'cat {input.all_lengths} >> {output}'


# rule curate_all_lengths:
#     input:
#         file = 'all_lengths.txt',
#         script = srcdir + '/fix_all_lengths.R'
#     output:
#         'curated_all_lengths.txt'
#     params:
#         wd = base
#     shell:
#         'Rscript {input.script} {input.file} {params.wd}'


# rule get_bacteria_chunks:
#     input:
#         'curated_all_lengths.txt'
#     output:
#         chunks = 'bacteria_chunks.txt'
#     shell:
#         '''
#         mkdir chunk_fna 
#         # find exclusive groups of bacteria 
#         grep "Bacteria;" {input} | sed "s/.*Bacteria;//" | sed "s/;.*//" | sed "s/_.*//" | sed "s/^/Bacteria;/"| uniq | sort | uniq > {output.chunks}
#         '''

rule chunk_bacteria:
    input:
        chunks = 'bacteria_chunks.txt',
        fna = 'concat_fna/bacteria.{chunk}.1.genomic.concat.fna.gz',
        script = srcdir + '/split_bacter.py'
    log:
        'log/chunk_bacteria.{chunk}.log'
    output:
        controlflow = temp('chunk_bacteria.{chunk}.done.txt')
    shell:
        '''
        python {input.script} {input.fna} {input.chunks} {wildcards.chunk} > {log} 2>&1
        touch chunk_bacteria.{wildcards.chunk}.done.txt
        '''

# rule curate_fna:
#     input: 
#         controlflow = 'controlflow_curate_fna',
#         fna = 'concat_fna/microbe_temp.fna.gz',
#         curated = 'curated_all_lengths.txt',
#         script = srcdir + '/split_file.py'
#     output: 
#         file = 'merged_fna/single_genome.concat.fna.gz',
#         controlflow = temp('done.txt')
#     log:
#         'log/curate_fna.log'
#     shell:
#         '''
#         mkdir -p merged_fna
#         python {input.script} {input.fna} {input.curated}
#         touch {output.controlflow}

#         # check line lengths
#         # for file in *; do echo $file; zcat $file | awk '{{ print length }}' | grep -n -v '60'; done
#         '''

